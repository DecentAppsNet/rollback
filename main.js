var l=class extends Error{constructor(e){super(e),this.name="ExpectedError"}},u=l;function T(t){console.error(`::error::${t}`)}function v(t){console.warn(`::warning::${t}`)}function _(t){console.log(`::notice::${t}`)}function $(t){_(`\u2705 ${t}`)}function a(t){console.log(t)}function d(t){T(t),process.exit(1)}function g(t){console.log(`::group::${t}`)}function f(){console.log("::endgroup::")}function m(t,e=!1){let o=`INPUT_${t.replace(/ /g,"_").toUpperCase()}`,n=process.env[o];return e&&!n&&d(`Input ${t} is required.`),n||""}function w(){let t=process.env.GITHUB_REPOSITORY_OWNER;if(!t)throw new u("GITHUB_REPOSITORY_OWNER environment variable is not set.");return t}function R(){return process.env.GITHUB_ACTIONS==="true"}import*as C from"node:https";async function b(t,e){return new Promise((o,n)=>{t.headers||(t.headers={}),t.headers["Content-Length"]=Buffer.byteLength(e);let s=C.request(t,r=>{let i="";r.on("data",p=>{i+=p}),r.on("end",async()=>{r.statusCode&&r.statusCode>=200&&r.statusCode<300?o({statusCode:r.statusCode,body:i}):n(new u(`Request to ${t.hostname} failed with status code: ${r.statusCode}. Response: ${i}`))})});s.on("error",r=>n(r)),s.write(e),s.end()}).catch(o=>{throw o})}var h="1.0",y=`v${h} Decent Tools`;function q(t){let e="<!-- v",o=t.indexOf(e);if(o===-1)return null;let n=o+e.length,s=t.indexOf(" ",n);return s===-1?null:t.substring(n,s)}function x(t,e){let o=` ${e}='`,n=t.indexOf(o);if(n===-1)return null;let s=n+o.length,r=t.indexOf("'",s);return r===-1?null:t.substring(s,r)}function A(t){let e=q(t);if(!e)throw Error("Failed to parse stage index format version.");if(e!==h)throw Error(`Unsupported stage index format version ${e}.`);return e}function S(){return{productionVersion:"",rollbackVersion:"",stageVersion:""}}function E(t,e,o,n){let s=`/_${t}/${e}/`;return`<!DOCTYPE html><html><head><title>Stage Index for ${t}</title><script>
<!-- ${y}. Hand-edit at your own risk! -->
const productionVersion='${o}';
const rollbackVersion='${n}';
const stageVersion='${e}';
window.location.href='${s}';
</script></head><body></body></html>`}async function I(t){let e=`https://decentapps.net/_${t}/index.html`,o=await fetch(e);if(!o.ok)return S();let n=await o.text();try{A(n)}catch(p){return v(`Could not retrieve app versions from existing stage index at ${e}: ${p.message}.`),S()}let s=x(n,"productionVersion")??"",r=x(n,"rollbackVersion")??"";return{stageVersion:x(n,"stageVersion")??"",productionVersion:s,rollbackVersion:r}}var H="partner.decentapps.net";async function O(t,e,o,n,s,r,i){let p=i?`/api/deployment/${o}/index.html`:`/api/deployment/${o}/index.html?updateRoute=true`,V={hostname:H,path:p,port:443,method:"PUT",headers:{"Content-Type":"text/html",Authorization:`Bearer ${e}`,"x-repo-owner":t,Accept:"application/json"}},P=E(o,n,s,r),c=await b(V,P);if(c.statusCode<200||c.statusCode>=300)throw new Error(`Failed to upload file to partner service. Status code: ${c.statusCode}. Response: ${c.body}`)}async function U(){try{g("Collecting inputs"),a("repo owner");let t=w();a("Decent API key");let e=m("api-key",!0);a("app name");let o=m("app-name",!0);f(),g("Updating stage index"),a("fetch app versions");let{stageVersion:n,productionVersion:s,rollbackVersion:r}=await I(o);(!r||r===s)&&d(`No rollback version available for app ${o}.`),s=r,r="",a(`uploading new stage index - stage version=${n}, production version=${s}, rollback version=${r}`),await O(t,e,o,n,s,r,!0),f();let i=`https://decentapps.net/${o}/`;$(`Successfully rolled back production URL "${i}" to ${s} version. Staging remains at ${n} version.`)}catch(t){let o=!R()||t.name==="ExpectedError"?t.message:"An unexpected error occurred.";d(o)}}U();
